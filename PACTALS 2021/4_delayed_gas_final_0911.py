# -*- coding: utf-8 -*-
"""4.Delayed gas final 0911

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1srNXU9EwY46QMR2uAxTPbXnxl-ToLrWH
"""

import pandas as pd
import matplotlib.pyplot as plt
import numpy as np
import seaborn as sns

"""# 1. Preprocessing"""

#현지용
feature = pd.read_csv('/content/drive/MyDrive/Colab Notebooks/본 실험/PACTALS/dataset/0815/0817_X_imputed.csv') 
optimal_gastro = pd.read_csv('/content/drive/MyDrive/Colab Notebooks/본 실험/PACTALS/dataset/0815/0817_optimal_target.csv') 
real_gastro = pd.read_csv('/content/drive/MyDrive/Colab Notebooks/본 실험/PACTALS/dataset/0725/real-target.csv의 사본') 
surv = pd.read_csv('/content/drive/MyDrive/Colab Notebooks/본 실험/survival.csv')

#원준용
from google.colab import files 
uploaded = files.upload()

#원준용
import io
feature = pd.read_csv(io.BytesIO(uploaded['0817_X_imputed.csv'])) 
optimal_gastro = pd.read_csv(io.BytesIO(uploaded['0817_optimal_target.csv'])) 
real_gastro = pd.read_csv(io.BytesIO(uploaded['0817_real-target.csv']))
surv =  pd.read_csv(io.BytesIO(uploaded['survival.csv']))

optimal_gastro.drop(columns='Unnamed: 0', inplace=True)
real_gastro.drop(columns='Unnamed: 0', inplace=True)
feature.drop(columns='Unnamed: 0', inplace=True)

feature.drop(columns='onset_site', inplace=True)
feature['mean_Q1_2_3_mouth'] = feature['mean_Q1_Speech'] + feature['mean_Q2_Salivation'] + feature['mean_Q3_Swallowing']

pip install lifelines

print("There are",len(feature),"patients with feature") # There are 4088 patients with feature
print("There are",len(optimal_gastro),"patients with opt-gas value") # There are 4523 patients with opt-gas value
print("There are",len(real_gastro),"patients with real-gas value") # There are 5027 patients with real-gas value
feature_real = feature.merge(real_gastro, on='SubjectID', how='inner')
print("There are",len(feature_real),"patients with feature & real value 1:",len(feature_real[feature_real['status_real']==1]),"0:", len(feature_real[feature_real['status_real']==0])) # There are 2941 patients with feature & real value 1: 475 0: 2466

"""## 1-1. Calculate predicted optimal time for patients"""

# train data for model predicting optimal gas time
feature_opt = feature.merge(optimal_gastro, on='SubjectID', how='inner')
feature_opt.query('time_opt !=0', inplace=True)

df_train = feature_opt.copy()
df_train = df_train[['Age', 'onset_delta', 'fvc_mean',  'mean_Q1_2_3_mouth', 'mean_Q7_Turning_in_Bed', 'slope_Q1_Speech',
                       'slope_Q3_Swallowing', 'weight_slope', 'time_opt', 'status_opt']]
df_train

# input data for trained model
df_input = feature_real[['Age', 'onset_delta', 'fvc_mean',  'mean_Q1_2_3_mouth', 'mean_Q7_Turning_in_Bed', 'slope_Q1_Speech',
                       'slope_Q3_Swallowing', 'weight_slope']]
df_input

# Train model
from lifelines import CoxPHFitter
cph = CoxPHFitter(penalizer=0.1, l1_ratio=0.2)
cph.fit(df_train, 'time_opt', event_col='status_opt')

# median optimal time is predicted by trained model
cph_median = pd.concat([feature_real['SubjectID'],cph.predict_median(df_input)], axis=1)
cph_median.columns = ['SubjectID', 'predicted_opt']
cph_median_without_inf = cph_median[cph_median['predicted_opt']!=np.inf]
feat_real_optpred = feature_real.merge(cph_median_without_inf, on='SubjectID', how='inner')
feat_real_optpred['delayed_gas'] = feat_real_optpred['time_real']-feat_real_optpred['predicted_opt']
print('There are ', len(cph_median[cph_median['predicted_opt']==np.inf]), 'inf values which have been removed')
 # There are  8 inf values which have been removed
print(cph_median_without_inf)

"""## 1-2. Merge (real gas/ predicted optimal gas / survival) & Define delayed gas"""

feat_real_optpred = feature_real.merge(cph_median_without_inf, on='SubjectID', how='inner')
feat_real_optpred['delayed_gas'] = feat_real_optpred['time_real']-feat_real_optpred['predicted_opt'] # Delayed gas is defined as time differece between 'predicted opt' and 'time real'
feat_real_optpred # 2933 data

feat_dg_surv = feat_real_optpred.merge(surv, on='SubjectID', how='inner') # 'dg' states for delayed gastrostomy
feat_dg_surv #2930 data

"""# 2. Analysis on Survival effect of delayed gastrostomy"""

# Filter with (time real, predicted opt < time event for survival) 
feat_dg_surv_filtered = feat_dg_surv[feat_dg_surv['time_real']<feat_dg_surv['time_event']]
feat_dg_surv_filtered = feat_dg_surv_filtered[feat_dg_surv_filtered['predicted_opt']<feat_dg_surv_filtered['time_event']]
print(len(feat_dg_surv_filtered), 'are left, while', len(feat_dg_surv)-len(feat_dg_surv_filtered), "are removed for censoring")

plt.figure(figsize=(8, 3))
sns.histplot(feat_dg_surv_filtered['delayed_gas'])

"""## 2-1. brief observation: Correlation between survival time and delayed gas"""

scat_df = feat_dg_surv_filtered.query('status==1 and status_real==1')
fig, ax = plt.subplots(figsize=(6,5))
sns.regplot(x=scat_df['delayed_gas'], y=scat_df['time_event'], fit_reg=True) 
plt.xlabel('Delayed_gastrostomy', fontsize=9)
plt.ylabel('Survival time', fontsize=9)
plt.show()

"""## 2-2. Group estimation by Kaplan-Meier"""

f_d_s_f_real_1 = feat_dg_surv_filtered[feat_dg_surv_filtered['status_real']==1]
print(f_d_s_f_real_1['delayed_gas'].describe())

# 25%      -46.000000
# 50%       29.000000
# 75%       90.000000

# Early / Medium / Late group with 25/50/25 percentile
feature_early= f_d_s_f_real_1[f_d_s_f_real_1['delayed_gas']<= -46]
feature_medium= f_d_s_f_real_1.query('(delayed_gas > -46) and (delayed_gas <= 90)')
feature_late= f_d_s_f_real_1[feat_dg_surv_filtered['delayed_gas']> 90]

early_list= list(feature_early['SubjectID'])
medium_list= list(feature_medium['SubjectID'])
late_list= list(feature_late['SubjectID'])+list(feat_dg_surv_filtered[feat_dg_surv_filtered['status_real']==0].query('delayed_gas >90')['SubjectID']) # Patients in (status_real, status_opt) = (0. 1)  who satisfied criterion were added for late group
 
surv_early = feat_dg_surv_filtered.query("SubjectID == {0}".format(early_list))
surv_medium = feat_dg_surv_filtered.query("SubjectID == {0}".format(medium_list))
surv_late = feat_dg_surv_filtered.query("SubjectID == {0}".format(late_list))

print("Subjects are categorized  ", len(surv_early), "(25% Early)", len(surv_medium), '(50% Medium)', len(surv_late), '(25+a% Late)')
 # Subjects are categorized   74 (25% Early) 146 (50% Medium) 123 (25+a% Late)

from lifelines import KaplanMeierFitter
plt.figure(figsize=(8, 6))
kmf = KaplanMeierFitter()

kmf.fit(surv_early["time_event"], surv_early["status"], label="early",alpha=1)
ax_kmf = kmf.plot(linewidth=3)
kmf.fit(surv_medium["time_event"], surv_medium["status"], label="medium",alpha=1)
ax_kmf = kmf.plot(ax=ax_kmf, color='#FFB291',linewidth=3)
kmf.fit(surv_late["time_event"], surv_late["status"], label="late",alpha=1)
ax_kmf = kmf.plot(ax=ax_kmf, linewidth=3)

ax_kmf.set_ylim(0,1.02)
ax_kmf.set_xlim()
ax_kmf.set_xlabel('time (days)', fontsize=11)
ax_kmf.set_ylabel('survival function, $\hat{S}(t)$', fontsize=13)
plt.title('Group estimation by Kaplan-Meier', fontsize=13)
plt.show()
print('The plot above suggests a time-varying effect of delayed gastrostomy for survival event.')

from lifelines.statistics import logrank_test
logrank_test(surv_early["time_event"], surv_late["time_event"], surv_early["status"], surv_late["status"]).p_value
# p_value = 0.0656232640715018